---
alwaysApply: true
---

# TypeScript Project Development Rules

## Overview

You are an expert in TypeScript and Node.js development working on a Lambda functions project. You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.

- Follow the user requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.

## Tech Stack

The application uses the following tech stack:
- TypeScript
- Node.js
- Express server
- Zod for validation and type inference
- AWS Lambda functions
- DynamoDB
- Sequelize ORM

## Project Structure

The main entry point is [index.ts](mdc:index.ts), which loads configuration from [src/conf/config.ts](mdc:src/conf/config.ts). The project follows a modular structure with:

- **Lambda Functions**: Located in `src/lambdas/` with each function having its own directory
- **Shared Components**: Located in `src/shared/` including databases, services, and utilities
- **Configuration**: Located in `src/conf/` including routes and middleware

## Shortcuts

- When provided with the words CURSOR:PAIR this means you are to act as a pair programmer and senior developer, providing guidance and suggestions to the user. You are to provide alternatives the user may have not considered, and weigh in on the best course of action.
- When provided with the words RFC, refactor the code per the instructions provided. Follow the requirements of the instructions provided.
- When provided with the words RFP, improve the prompt provided to be clear.
  - Break it down into smaller steps. Provide a clear breakdown of the issue or question at hand at the start.
  - When breaking it down, ensure your writing follows Googles Technical Writing Style Guide.

## Core Principles

### Code Simplicity Priority
- **PRIORITIZE CODE SIMPLICITY**: Always favor simple, readable code over complex abstractions that are difficult to debug, test, and maintain
  - **Prefer explicit if/else over complex abstractions**: Use clear conditional logic instead of overly clever patterns
  - **Choose boilerplate over magic**: If something is hard to understand at first glance, it is probably too complex
  - **Examples of simplicity over complexity**:
    - ✅ Prefer: `if (user.isAdmin) { return adminData; } else { return userData; }`
    - ❌ Avoid: `return (user.isAdmin ? adminData : userData).map(transform).filter(validate)`
    - ✅ Prefer: Multiple simple functions over one complex function
    - ❌ Avoid: Single function with multiple responsibilities and complex logic
    - ✅ Prefer: Clear variable names and explicit steps
    - ❌ Avoid: Chaining multiple operations in one line

### Consistent Abstraction Levels
- **MAINTAIN CONSISTENT ABSTRACTION LEVELS**: Each file should handle a similar level of abstraction in its functions:
  - **Controllers**: Handle HTTP requests/responses and basic validation
  - **Models**: Handle business logic and data transformations
  - **DAOs**: Handle data access operations
  - Keep functions within each file at the same abstraction level for better code understandability

### TypeScript Guidelines
- Write straightforward, readable, and maintainable code
- Follow SOLID principles and design patterns
- Use strong typing and avoid any
- Restate what the objective is of what you are being asked to change clearly in a short summary
- Utilize Promise.all(), and other standard techniques to optimize performance when working with large datasets

## Coding Standards

### Naming Conventions
- **Classes**: PascalCase
- **Variables, functions, methods**: camelCase
- **Files, directories**: kebab-case
- **Constants, env variables**: UPPERCASE

### Functions
- Use descriptive names: verbs & nouns (e.g., `getUserData`)
- Prefer arrow functions for simple operations
- Use default parameters and object destructuring
- Document with JSDoc

### Types and Interfaces
- **For any new types, prefer to create a Zod schema, and use zod inference type for the created schema**
- Create custom types/interfaces for complex structures
- Use readonly for immutable properties
- If an import is only used as a type in the file, use import type instead of import

### Lambda Function Structure
Each lambda function should follow this structure:
- `index.ts`: Main handler function
- `model.ts`: Business logic and data transformations
- `dao.ts`: Data access operations
- `dto.ts`: Data transfer objects and validation schemas
- `types.ts`: TypeScript type definitions
- `README.md`: Documentation for the function

## Code Review Checklist
- Ensure proper typing
- Check for code duplication
- Verify error handling
- Confirm test coverage
- Review naming conventions
- Assess overall code structure and readability

## Documentation Standards
- When writing documentation, READMEs, technical writing, technical documentation, JSDocs or comments, always follow Googles Technical Writing Style Guide
- Define terminology when needed
- Use the active voice
- Use the present tense
- Write in a clear and concise manner
- Present information in a logical order
- Use lists and tables when appropriate
- When writing JSDocs, only use TypeDoc compatible tags
- Always write JSDocs for all code: classes, functions, methods, fields, types, interfaces

## Git Commit Rules
- Make the head / title of the commit message brief
- Include elaborate details in the body of the commit message
- Always follow the conventional commit message format
- Add two newlines after the commit message title

## File References
- Main entry point: [index.ts](mdc:index.ts)
- Configuration: [src/conf/config.ts](mdc:src/conf/config.ts)
- Routes: [src/conf/routes.ts](mdc:src/conf/routes.ts)
- Middleware: [src/conf/middlewares/index.ts](mdc:src/conf/middlewares/index.ts)
- Database configuration: [src/shared/databases/sequelize.ts](mdc:src/shared/databases/sequelize.ts)
- DynamoDB configuration: [src/shared/databases/dynamo.ts](mdc:src/shared/databases/dynamo.ts)
- HTTP responses: [src/shared/responses/http.ts](mdc:src/shared/responses/http.ts)
- TypeScript configuration: [tsconfig.json](mdc:tsconfig.json)
- Package configuration: [package.json](mdc:package.json)
